/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    metaImage?: MediaType;
    _type: "seo";
  };
  distributionMovieDetailTitles?: {
    directorsLabel?: string;
    writersLabel?: string;
    actorsLabel?: string;
    languagesLabel?: string;
    releaseDateLabel?: string;
    durationLabel?: string;
  };
};

export type Header = {
  _id: string;
  _type: "header";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  linkReference?: Array<{
    linkLabel?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    _type: "internalLink";
    _key: string;
  } | {
    linkLabel?: string;
    link?: LinkType;
    _type: "externalLink";
    _key: string;
  }>;
  homeMenuItemLabel?: string;
  socialMediaLinks?: Array<{
    _key: string;
  } & LinkType>;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  text?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h2" | "h3" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      _key: string;
    } & LinkType>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
  } & MediaType>;
  socialMediaLinks?: Array<{
    _key: string;
  } & LinkType>;
  rights?: string;
};

export type Seo = {
  _id: string;
  _type: "seo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  metaTitle?: string;
  metaDescription?: string;
  metaImage?: MediaType;
};

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h2" | "h3" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    _key: string;
  } & LinkType>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  _key: string;
} & MediaType>;

export type MediaGallery = {
  _type: "mediaGallery";
  mediaItems?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Writers = {
  _id: string;
  _type: "writers";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  writer?: string;
};

export type Languages = {
  _id: string;
  _type: "languages";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: string;
};

export type Distributions = {
  _id: string;
  _type: "distributions";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  releaseDate?: string;
  description?: RichText;
  duration?: string;
  languages?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "languages";
  }>;
  directors?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "directors";
  }>;
  writers?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "writers";
  }>;
  actors?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "actors";
  }>;
  ticket?: TicketType;
  button?: ButtonType;
  trailer?: TrailerType;
  movieBanner?: MediaType;
  moviePoster?: MediaType;
};

export type TrailerType = {
  _type: "trailerType";
  trailerLinkLabel?: string;
  trailerLink?: LinkType;
};

export type ButtonType = {
  _type: "buttonType";
  buttonLabel?: string;
  buttonLink?: LinkType;
};

export type TicketType = {
  _type: "ticketType";
  ticketLinkLabel?: string;
  ticketLink?: LinkType;
};

export type Directors = {
  _id: string;
  _type: "directors";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  director?: string;
};

export type Actors = {
  _id: string;
  _type: "actors";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  actor?: string;
};

export type PageTitle = {
  _type: "pageTitle";
  title?: string;
};

export type MovieHero = {
  _type: "movieHero";
  mediaItems?: MediaType;
};

export type MovieClubList = {
  _type: "movieClubList";
  movies?: Array<{
    movie?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "movieClub";
    };
    _type: "movie";
    _key: string;
  }>;
};

export type MediaCarousel = {
  _type: "mediaCarousel";
  carouselItems?: Array<{
    mediaItem?: MediaType;
    title?: string;
    _type: "carouselItem";
    _key: string;
  }>;
};

export type LogoCarousel = {
  _type: "logoCarousel";
  logoItems?: Array<{
    mediaItem?: MediaType;
    _type: "logoItem";
    _key: string;
  }>;
};

export type ImageWithText = {
  _type: "imageWithText";
  mediaItem?: MediaType;
  mediaTitle?: string;
  textSection?: Array<{
    title?: string;
    richText?: RichText;
    _type: "textItem";
    _key: string;
  }>;
};

export type Hero = {
  _type: "hero";
  mediaCard?: Array<{
    cardImage?: MediaType;
    title?: string;
    infoItems?: Array<{
      infoItemTitle?: string;
      _type: "infoItem";
      _key: string;
    }>;
    buttonLabel?: string;
    internalButtonLink?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    externalButtonLink?: LinkType;
    _type: "content";
    _key: string;
  }>;
  logo?: MediaType;
};

export type DistributionList = {
  _type: "distributionList";
  movies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "distributions";
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  pageTitle?: string;
  slug?: Slug;
  blockList?: Array<{
    _key: string;
  } & DistributionList | {
    _key: string;
  } & Hero | {
    _key: string;
  } & ImageWithText | {
    _key: string;
  } & LogoCarousel | {
    _key: string;
  } & MediaCarousel | {
    _key: string;
  } & MovieClubList | {
    _key: string;
  } & MovieHero | {
    _key: string;
  } & PageTitle>;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    metaImage?: MediaType;
    _type: "seo";
  };
};

export type MovieClub = {
  _id: string;
  _type: "movieClub";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  movieBanner?: MediaType;
};

export type LinkType = {
  _type: "linkType";
  href?: string;
};

export type MediaType = {
  _type: "mediaType";
  media?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Settings | Header | Footer | Seo | RichText | MediaGallery | Writers | Languages | Distributions | TrailerType | ButtonType | TicketType | Directors | Actors | PageTitle | MovieHero | MovieClubList | MediaCarousel | LogoCarousel | ImageWithText | Hero | DistributionList | Page | MovieClub | LinkType | MediaType | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: fetchAllPageSlugs
// Query: *[_type == "page" && defined(slug.current)]{    "slug": slug.current  }
export type FetchAllPageSlugsResult = Array<{
  slug: string | null;
}>;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{      _id,      _type,      seo {        metaTitle,        metaDescription,        metaImage {          _type,          media {            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        }      },      distributionMovieDetailTitles {        directorsLabel,        writersLabel,        actorsLabel,        languagesLabel,        releaseDateLabel,        durationLabel      }    }
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    metaImage: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
  distributionMovieDetailTitles: {
    directorsLabel: string | null;
    writersLabel: string | null;
    actorsLabel: string | null;
    languagesLabel: string | null;
    releaseDateLabel: string | null;
    durationLabel: string | null;
  } | null;
} | null;
// Variable: fetchHeader
// Query: *[_type == "header"][0]{  linkReference[]{    id,    _key,    _type,    _id,    // For internal links    _type == "internalLink" => {      linkLabel,      page->{        _id,        pageTitle,        slug      }    },    // For external links    _type == "externalLink" => {      linkLabel,      link{        href      }    }  },  homeMenuItemLabel,  socialMediaLinks[]{    _key,    _type,    _id,    href  }}
export type FetchHeaderResult = {
  linkReference: Array<{
    id: null;
    _key: string;
    _type: "externalLink";
    _id: null;
    linkLabel: string | null;
    link: {
      href: string | null;
    } | null;
  } | {
    id: null;
    _key: string;
    _type: "internalLink";
    _id: null;
    linkLabel: string | null;
    page: {
      _id: string;
      pageTitle: string | null;
      slug: Slug | null;
    } | null;
  }> | null;
  homeMenuItemLabel: string | null;
  socialMediaLinks: Array<{
    _key: string;
    _type: "linkType";
    _id: null;
    href: string | null;
  }> | null;
} | null;
// Variable: fetchFooter
// Query: *[_type == "footer"][0]{    _id,    _type,    title,    text[],    socialMediaLinks[]{      _key,      _type,      _id,      href    },    rights  }
export type FetchFooterResult = {
  _id: string;
  _type: "footer";
  title: string | null;
  text: Array<{
    _key: string;
  } & MediaType | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h2" | "h3" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      _key: string;
    } & LinkType>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  socialMediaLinks: Array<{
    _key: string;
    _type: "linkType";
    _id: null;
    href: string | null;
  }> | null;
  rights: string | null;
} | null;
// Variable: fetchHome
// Query: *[_type == "page" && slug.current == '/'][0]{  _id,    _type,    pageTitle,    slug,    blockList[]{      // Page Title Block      _type == "pageTitle" => {        _type,        title      },      // Hero Block      _type == "hero" => {        _type,        mediaCard[]{          id,          cardImage{            _type,            media{              _type,              alt,              crop,              hotspot,              asset->{ ... }            }          },          title,          infoItems[]{            id,            infoItemTitle          },          buttonLabel,          internalButtonLink->{_id, title, slug},          externalButtonLink{href}        },        logo{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        }      },    // Media Carousel Block    _type == "mediaCarousel" => {      _type,      carouselItems[]{        title,        mediaItem{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        },      }    },      // Movie Club List Block      _type == "movieClubList" => {        _type,        movies[]{          id,          movie->{            _id,            title,            moviePoster{              _type,              media{                _type,                alt,                crop,                hotspot,                asset->{ ... }              }            },            movieBanner{              _type,              media{                _type,                alt,                crop,                hotspot,                asset->{ ... }              }            }          }        }      },      // Movie Hero Block      _type == "movieHero" => {        _type,        mediaItems{          _type,          media{            _type,            alt,            crop,            hotspot,              asset->{ ... }          }        }      },      // Image With Text Block      _type == "imageWithText" => {        _type,        mediaItem{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        },        mediaTitle,        textSection[]{          id,          title,          richText        }      },      // Logo Carousel Block      _type == "logoCarousel" => {        _type,        logoItems[]{          id,          mediaItem{            _type,            media{              _type,              alt,              crop,              hotspot,              asset->{ ... }            }          }        }      }    },    seo {      metaTitle,      metaDescription,      metaImage {        _type,        media {          _type,          alt,          crop,          hotspot,          asset->{ ... }        }      }    }  }
export type FetchHomeResult = {
  _id: string;
  _type: "page";
  pageTitle: string | null;
  slug: Slug | null;
  blockList: Array<{
    _type: "hero";
    mediaCard: Array<{
      id: null;
      cardImage: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
      title: string | null;
      infoItems: Array<{
        id: null;
        infoItemTitle: string | null;
      }> | null;
      buttonLabel: string | null;
      internalButtonLink: {
        _id: string;
        title: null;
        slug: Slug | null;
      } | null;
      externalButtonLink: {
        href: string | null;
      } | null;
    }> | null;
    logo: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | {
    _type: "imageWithText";
    mediaItem: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
    mediaTitle: string | null;
    textSection: Array<{
      id: null;
      title: string | null;
      richText: RichText | null;
    }> | null;
  } | {
    _type: "logoCarousel";
    logoItems: Array<{
      id: null;
      mediaItem: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "mediaCarousel";
    carouselItems: Array<{
      title: string | null;
      mediaItem: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "movieClubList";
    movies: Array<{
      id: null;
      movie: {
        _id: string;
        title: string | null;
        moviePoster: null;
        movieBanner: {
          _type: "mediaType";
          media: {
            _type: "image";
            alt: string | null;
            crop: SanityImageCrop | null;
            hotspot: SanityImageHotspot | null;
            asset: {
              _id: string;
              _type: "sanity.imageAsset";
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              originalFilename?: string;
              label?: string;
              title?: string;
              description?: string;
              altText?: string;
              sha1hash?: string;
              extension?: string;
              mimeType?: string;
              size?: number;
              assetId?: string;
              uploadId?: string;
              path?: string;
              url?: string;
              metadata?: SanityImageMetadata;
              source?: SanityAssetSourceData;
            } | null;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "movieHero";
    mediaItems: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | {
    _type: "pageTitle";
    title: string | null;
  } | {}> | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    metaImage: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: fetchPage
// Query: *[_type == "page" && slug.current == $slug][0]{    _id,    _type,    pageTitle,    slug,    blockList[]{      // Page Title Block      _type == "pageTitle" => {        _type,        title      },      // Hero Block      _type == "hero" => {        _type,        mediaCard[]{          id,          cardImage{            _type,            media{              _type,              alt,              crop,              hotspot,              asset->{ ... }            }          },          title,          infoItems[]{            id,            infoItemTitle          },          buttonLabel,          internalButtonLink->{_id, title, slug},          externalButtonLink{href}        },        logo{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        }      },    // Media Carousel Block    _type == "mediaCarousel" => {      _type,      carouselItems[]{        title,        mediaItem{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        },      }    },      // Movie Club List Block      _type == "movieClubList" => {        _type,        movies[]{          id,          movie->{            _id,            title,            movieBanner{              _type,              media{                _type,                alt,                crop,                hotspot,                asset->{ ... }              }            }          }        }      },      // Movie Hero Block      _type == "movieHero" => {        _type,        mediaItems{          _type,          media{            _type,            alt,            crop,            hotspot,              asset->{ ... }          }        }      },      // Image With Text Block      _type == "imageWithText" => {        _type,        mediaItem{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        },        mediaTitle,        textSection[]{          id,          title,          richText        }      },      // Logo Carousel Block      _type == "logoCarousel" => {        _type,        logoItems[]{          id,          mediaItem{            _type,            media{              _type,              alt,              crop,              hotspot,              asset->{ ... }            }          }        }      },      // Distribution List Block      _type == "distributionList" => {        _type,        movies[]->{        _id,        title,        slug{          _type,          current        },        releaseDate,        description,        duration,        languages[]->{          _id,          language        },        directors[]->{          _id,          director        },        writers[]->{          _id,          writer        },        actors[]->{          _id,          actor        },        ticket,        button,        trailer,        moviePoster{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        },        movieBanner{          _type,          media{            _type,            alt,            crop,            hotspot,            asset->{ ... }          }        }      }      }    },    seo {      metaTitle,      metaDescription,      metaImage {        _type,        media {          _type,          alt,          crop,          hotspot,          asset->{ ... }        }      }    }  }
export type FetchPageResult = {
  _id: string;
  _type: "page";
  pageTitle: string | null;
  slug: Slug | null;
  blockList: Array<{
    _type: "distributionList";
    movies: Array<{
      _id: string;
      title: string | null;
      slug: {
        _type: "slug";
        current: string | null;
      } | null;
      releaseDate: string | null;
      description: RichText | null;
      duration: string | null;
      languages: Array<{
        _id: string;
        language: string | null;
      }> | null;
      directors: Array<{
        _id: string;
        director: string | null;
      }> | null;
      writers: Array<{
        _id: string;
        writer: string | null;
      }> | null;
      actors: Array<{
        _id: string;
        actor: string | null;
      }> | null;
      ticket: TicketType | null;
      button: ButtonType | null;
      trailer: TrailerType | null;
      moviePoster: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
      movieBanner: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "hero";
    mediaCard: Array<{
      id: null;
      cardImage: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
      title: string | null;
      infoItems: Array<{
        id: null;
        infoItemTitle: string | null;
      }> | null;
      buttonLabel: string | null;
      internalButtonLink: {
        _id: string;
        title: null;
        slug: Slug | null;
      } | null;
      externalButtonLink: {
        href: string | null;
      } | null;
    }> | null;
    logo: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | {
    _type: "imageWithText";
    mediaItem: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
    mediaTitle: string | null;
    textSection: Array<{
      id: null;
      title: string | null;
      richText: RichText | null;
    }> | null;
  } | {
    _type: "logoCarousel";
    logoItems: Array<{
      id: null;
      mediaItem: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "mediaCarousel";
    carouselItems: Array<{
      title: string | null;
      mediaItem: {
        _type: "mediaType";
        media: {
          _type: "image";
          alt: string | null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "movieClubList";
    movies: Array<{
      id: null;
      movie: {
        _id: string;
        title: string | null;
        movieBanner: {
          _type: "mediaType";
          media: {
            _type: "image";
            alt: string | null;
            crop: SanityImageCrop | null;
            hotspot: SanityImageHotspot | null;
            asset: {
              _id: string;
              _type: "sanity.imageAsset";
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              originalFilename?: string;
              label?: string;
              title?: string;
              description?: string;
              altText?: string;
              sha1hash?: string;
              extension?: string;
              mimeType?: string;
              size?: number;
              assetId?: string;
              uploadId?: string;
              path?: string;
              url?: string;
              metadata?: SanityImageMetadata;
              source?: SanityAssetSourceData;
            } | null;
          } | null;
        } | null;
      } | null;
    }> | null;
  } | {
    _type: "movieHero";
    mediaItems: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | {
    _type: "pageTitle";
    title: string | null;
  }> | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    metaImage: {
      _type: "mediaType";
      media: {
        _type: "image";
        alt: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: fetchDistributionMovie
// Query: *[_type == "distributions" && slug.current == $slug][0]{    title,    slug,    releaseDate,    description,    duration,    languages[]->{      _id,      language    },    directors[]->{      _id,      director    },    writers[]->{      _id,      writer    },    actors[]->{      _id,      actor    },    ticket,    button,    trailer,    moviePoster{      _type,      media{        _type,        alt,        crop,        hotspot,        asset->{ ... }      }    },    movieBanner{      _type,      media{        _type,        alt,        crop,        hotspot,        asset->{ ... }      }    }  }
export type FetchDistributionMovieResult = {
  title: string | null;
  slug: Slug | null;
  releaseDate: string | null;
  description: RichText | null;
  duration: string | null;
  languages: Array<{
    _id: string;
    language: string | null;
  }> | null;
  directors: Array<{
    _id: string;
    director: string | null;
  }> | null;
  writers: Array<{
    _id: string;
    writer: string | null;
  }> | null;
  actors: Array<{
    _id: string;
    actor: string | null;
  }> | null;
  ticket: TicketType | null;
  button: ButtonType | null;
  trailer: TrailerType | null;
  moviePoster: {
    _type: "mediaType";
    media: {
      _type: "image";
      alt: string | null;
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
  } | null;
  movieBanner: {
    _type: "mediaType";
    media: {
      _type: "image";
      alt: string | null;
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"page\" && defined(slug.current)]{\n    \"slug\": slug.current\n  }\n": FetchAllPageSlugsResult;
    "\n    *[_type == \"settings\"][0]{\n      _id,\n      _type,\n      seo {\n        metaTitle,\n        metaDescription,\n        metaImage {\n          _type,\n          media {\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        }\n      },\n      distributionMovieDetailTitles {\n        directorsLabel,\n        writersLabel,\n        actorsLabel,\n        languagesLabel,\n        releaseDateLabel,\n        durationLabel\n      }\n    }\n    ": SettingsQueryResult;
    "\n *[_type == \"header\"][0]{\n  linkReference[]{\n    id,\n    _key,\n    _type,\n    _id,\n    // For internal links\n    _type == \"internalLink\" => {\n      linkLabel,\n      page->{\n        _id,\n        pageTitle,\n        slug\n      }\n    },\n    // For external links\n    _type == \"externalLink\" => {\n      linkLabel,\n      link{\n        href\n      }\n    }\n  },\n  homeMenuItemLabel,\n  socialMediaLinks[]{\n    _key,\n    _type,\n    _id,\n    href\n  }\n}\n": FetchHeaderResult;
    "\n  *[_type == \"footer\"][0]{\n    _id,\n    _type,\n    title,\n    text[],\n    socialMediaLinks[]{\n      _key,\n      _type,\n      _id,\n      href\n    },\n    rights\n  }\n": FetchFooterResult;
    "\n*[_type == \"page\" && slug.current == '/'][0]{\n  _id,\n    _type,\n    pageTitle,\n    slug,\n    blockList[]{\n      // Page Title Block\n      _type == \"pageTitle\" => {\n        _type,\n        title\n      },\n      // Hero Block\n      _type == \"hero\" => {\n        _type,\n        mediaCard[]{\n          id,\n          cardImage{\n            _type,\n            media{\n              _type,\n              alt,\n              crop,\n              hotspot,\n              asset->{ ... }\n            }\n          },\n          title,\n          infoItems[]{\n            id,\n            infoItemTitle\n          },\n          buttonLabel,\n          internalButtonLink->{_id, title, slug},\n          externalButtonLink{href}\n        },\n        logo{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        }\n      },\n    // Media Carousel Block\n    _type == \"mediaCarousel\" => {\n      _type,\n      carouselItems[]{\n        title,\n        mediaItem{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        },\n      }\n    },\n      // Movie Club List Block\n      _type == \"movieClubList\" => {\n        _type,\n        movies[]{\n          id,\n          movie->{\n            _id,\n            title,\n            moviePoster{\n              _type,\n              media{\n                _type,\n                alt,\n                crop,\n                hotspot,\n                asset->{ ... }\n              }\n            },\n            movieBanner{\n              _type,\n              media{\n                _type,\n                alt,\n                crop,\n                hotspot,\n                asset->{ ... }\n              }\n            }\n          }\n        }\n      },\n      // Movie Hero Block\n      _type == \"movieHero\" => {\n        _type,\n        mediaItems{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,  \n            asset->{ ... }\n          }\n        }\n      },\n      // Image With Text Block\n      _type == \"imageWithText\" => {\n        _type,\n        mediaItem{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        },\n        mediaTitle,\n        textSection[]{\n          id,\n          title,\n          richText\n        }\n      },\n      // Logo Carousel Block\n      _type == \"logoCarousel\" => {\n        _type,\n        logoItems[]{\n          id,\n          mediaItem{\n            _type,\n            media{\n              _type,\n              alt,\n              crop,\n              hotspot,\n              asset->{ ... }\n            }\n          }\n        }\n      }\n    },\n    seo {\n      metaTitle,\n      metaDescription,\n      metaImage {\n        _type,\n        media {\n          _type,\n          alt,\n          crop,\n          hotspot,\n          asset->{ ... }\n        }\n      }\n    }\n  }\n": FetchHomeResult;
    "\n  *[_type == \"page\" && slug.current == $slug][0]{\n    _id,\n    _type,\n    pageTitle,\n    slug,\n    blockList[]{\n      // Page Title Block\n      _type == \"pageTitle\" => {\n        _type,\n        title\n      },\n      // Hero Block\n      _type == \"hero\" => {\n        _type,\n        mediaCard[]{\n          id,\n          cardImage{\n            _type,\n            media{\n              _type,\n              alt,\n              crop,\n              hotspot,\n              asset->{ ... }\n            }\n          },\n          title,\n          infoItems[]{\n            id,\n            infoItemTitle\n          },\n          buttonLabel,\n          internalButtonLink->{_id, title, slug},\n          externalButtonLink{href}\n        },\n        logo{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        }\n      },\n    // Media Carousel Block\n    _type == \"mediaCarousel\" => {\n      _type,\n      carouselItems[]{\n        title,\n        mediaItem{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        },\n      }\n    },\n      // Movie Club List Block\n      _type == \"movieClubList\" => {\n        _type,\n        movies[]{\n          id,\n          movie->{\n            _id,\n            title,\n            movieBanner{\n              _type,\n              media{\n                _type,\n                alt,\n                crop,\n                hotspot,\n                asset->{ ... }\n              }\n            }\n          }\n        }\n      },\n      // Movie Hero Block\n      _type == \"movieHero\" => {\n        _type,\n        mediaItems{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,  \n            asset->{ ... }\n          }\n        }\n      },\n      // Image With Text Block\n      _type == \"imageWithText\" => {\n        _type,\n        mediaItem{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        },\n        mediaTitle,\n        textSection[]{\n          id,\n          title,\n          richText\n        }\n      },\n      // Logo Carousel Block\n      _type == \"logoCarousel\" => {\n        _type,\n        logoItems[]{\n          id,\n          mediaItem{\n            _type,\n            media{\n              _type,\n              alt,\n              crop,\n              hotspot,\n              asset->{ ... }\n            }\n          }\n        }\n      },\n      // Distribution List Block\n      _type == \"distributionList\" => {\n        _type,\n        movies[]->{\n        _id,\n        title,\n        slug{\n          _type,\n          current\n        },\n        releaseDate,\n        description,\n        duration,\n        languages[]->{\n          _id,\n          language\n        },\n        directors[]->{\n          _id,\n          director\n        },\n        writers[]->{\n          _id,\n          writer\n        },\n        actors[]->{\n          _id,\n          actor\n        },\n        ticket,\n        button,\n        trailer,\n        moviePoster{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        },\n        movieBanner{\n          _type,\n          media{\n            _type,\n            alt,\n            crop,\n            hotspot,\n            asset->{ ... }\n          }\n        }\n      }\n      }\n    },\n    seo {\n      metaTitle,\n      metaDescription,\n      metaImage {\n        _type,\n        media {\n          _type,\n          alt,\n          crop,\n          hotspot,\n          asset->{ ... }\n        }\n      }\n    }\n  }\n  ": FetchPageResult;
    "\n*[_type == \"distributions\" && slug.current == $slug][0]{\n    title,\n    slug,\n    releaseDate,\n    description,\n    duration,\n    languages[]->{\n      _id,\n      language\n    },\n    directors[]->{\n      _id,\n      director\n    },\n    writers[]->{\n      _id,\n      writer\n    },\n    actors[]->{\n      _id,\n      actor\n    },\n    ticket,\n    button,\n    trailer,\n    moviePoster{\n      _type,\n      media{\n        _type,\n        alt,\n        crop,\n        hotspot,\n        asset->{ ... }\n      }\n    },\n    movieBanner{\n      _type,\n      media{\n        _type,\n        alt,\n        crop,\n        hotspot,\n        asset->{ ... }\n      }\n    }\n  }\n": FetchDistributionMovieResult;
  }
}
